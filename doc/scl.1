.TH "scl" "1"
.SH "NAME"
scl \- Setup and run software from Software Collection environment
.SH "SYNOPSIS"
.PP
\fBscl enable|run\fP \fI<collection1>\fR [\fI<collection2> ...\fR] \fI<command>\fR [\fB-x|--exec\fP]

.PP
\fBscl load|unload\fP \fI<collection1>\fR [\fI<collection2> ...\fR]
.PP
\fBscl list-collections\fP
.PP
\fBscl list-packages\fP \fI<collection>\fR
.PP
\fBscl register\fP \fI<path>\fR
.PP
\fBscl deregister\fP \fI<collection>\fR [\fB-f|--force\fP]
.PP
\fBscl man\fP \fI<collection>\fR
.PP
\fBscl -V|--version\fR
.SH "DESCRIPTION"
.PP
This manual page documents \fBscl\fP, a
program which is an utility for running software packaged as a Software Collection.
.PP
\fBscl\fP utility allows to execute an application which is not located in the filesystem
root hierarchy but is present in an alternative location. This application can still use
and benefit from software installed in the root filesystem. In order to let an application
be visible to the system one has to use \fBscl\fP utility as an interface.
.PP
.SH "OPTIONS"
.PP
.IP "\fBenable, run\fP \fI<collection1>\fR [\fI<collection2> ...\fR] \fI<command>\fR [\fB-x|--exec\fP]"
Run \fI<command>\fR within the environment of the given collections. Each collection contains a module file that defines how collection modifies the environment. First the environment is modified according to module files of the given collections and then \fI<command>\fR is executed. Control is returned back to the caller with the original environment as soon as the \fI<command>\fR finishes. If \fI<command>\fR is '-' (dash) then it is read from the standard input.

If \fB--exec\fP is specified then function exec() will be used for command execution otherwise function system() will be used.

Note: if you use \fI<command>\fR consisting of multiple arguments, you either need to
use quotes or the \fB--\fP command separator. Everything that follows the
separator will be considered a command or its argument.

Note: some commands modify user environment in some way. Those commands may
potentially break SCLs, as their activation also usually depends on env.
modification as well. Typical examples of such commands are \fBsu\fP and
\fBsudo\fP. Every collection modifies the environment differently, thus more
details may be found in the documentation of the particular collection.
.IP "\fBload\fP \fI<collection1>\fR [\fI<collection2> ...\fR]
Load the given collections into current shell. The environment of current shell is modified according to module files of the collections.
.IP "\fBunload\fP \fI<collection1>\fR [\fI<collection2> ...\fR]
Unload the given collections from current shell. The environment of current shell is returned back to the state before loading the collections.
.IP "\fBlist-collections\fP"
Lists all installed Software Collections on the system.
.IP "\fBlist-packages\fP \fI<collection1> <collection2> ...\fR"
If a collection name is specified then list of installed packages belonging to the collection is listed.
.IP "\fBregister\fP \fI<path>\fR"
If \fI<path>\fR leads to valid SCL file structure, \fBscl\fP will register that as a SCL.
\fI<path>\fR directory needs to contain \fBmodule\fR file and \fBroot\fP directory,
to be considered valid SCL.
<path> needs to be an absolute path to the collection location.
.IP "\fBderegister\fP \fI<collection>\fR [\fB-f|--force\fP]"
\fI<collection>\fR will no longer be considered SCL.
If the \fI<collection>\fR was installed locally, then the use of \fB--force\fP is needed.i
.IP "\fBman\fP \fI<collection>\fR
Show manual page for \fI<collection>\fR.
.IP "\fB-v, --version\fR"
Show version.
.SH "EXAMPLES"
.TP
scl enable example 'less --version'
runs command 'less --version' in the environment with collection 'example' enabled
.TP
scl load foo bar
Load foo and bar Software Collections into current shell
.TP
scl unload foo bar
Unload foo and bar Software Collections from current shell
.TP
cat my_command | scl enable baz -
run set of commands listed in my_command file in the environment with baz Software Collection
enabled
.TP
scl list-collections
list all installed collections
.TP
scl list-packages example
list all packages within example collection
.TP
scl register /foo/bar
registers new collection with a name bar
.TP
scl deregister bar --force
forces the deregistration of collection bar
.TP
A wrapper script must use proper quoting or command separator like in the
following examples
.PP
.nf
.RS
#!/bin/bash
COMMAND="ruby $(printf "%q " "$@")"
scl enable ruby193 "$COMMAND"
# or
scl enable ruby193 -- $COMMAND
.RE
.fi
.SH "AUTHOR"
.PP
\fBscl\fP was written by Jindrich Novy <jnovy@redhat.com> and Jan Zeleny
<jzeleny@redhat.com>.
